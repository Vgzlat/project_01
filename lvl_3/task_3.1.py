# Задача 3.1.
# Создайте класс матрицы (или таблицы).
# Требования к классу:
#   - каждая колонка является числом от 1 до n (n любое число, которые вы поставите!)
#   - в каждой ячейке содержится либо число, либо None
#   - доступы следующие методы матрицы:
#       * принимать новые значения, 
#       * заменять существующие значения, 
#       * выводить число строк и колонок.

# Пример матрицы 10 на 10 из единиц:
# [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]

# Примечание! 
#   - новый класс не запрещено строить на базе существующих типов данных: списков, словарей и тд.
#   - отображать в таблице/матрице название колонки не обязательно!
#   - использовать готовые классы numpy.array() и pandas.DataFrame() запрещено!
#   - проявите фантазию :)

import random as rm #модуль пригодится для заполнения матриц

class Matrix:
    '''Класс матрицы, модель будет строиться на шаблоне из списка списков'''
    def __init__(self, row, col, num = 10) :
        #определение атрибутов
        self.row = row #кол-во строк матрицы
        self.col = col #кол-во рядов матрицы
        #заполнение матрицы (по сути списка) рандомными элементами
        lst = []
        for i in range(row):
            lst.append(rm.choices(list(range(1,num+1)), k = col))       
        self.all = lst

    def get_Matrix(self, i, j):
        '''Получение значения ячейки по заданным индексам'''
        if i > self.row or j > self.col:
            print('Выход за пределы индексов матрицы')
            return None
        else:    
            return self.all[i-1][j-1]

    def set_Matrix(self, i, j, value):
        '''Замена значения ячейки по заданным индексам на новую величину'''
        if i > self.row or j > self.col:
            print('Выход за пределы индексов матрицы')
        else:    
        #присвоение нового значения элементу двумерного массива в списке списков
            self.all[i-1][j-1] = value 

    def mtr_print(self):
        '''Вывод матрицы в презентабельном виде'''
        print('Сгенерированная матрица (презентабельный вид):')
        for i in range(self.row):
            g=''
            for j in range(self.col):
                g += '{:5d}'.format(self.all[i][j])
            print(g)    

try:
    rw = int(input('Укажите кол-во строк генерируемой матрицы: '))
    cl = int(input('Укажите кол-во рядов генерируемой матрицы: '))
    nm = int(input('Укажите наибольшее допускаемое значение для ячейки матрицы: '))
except:
    print('Требуется ввод целых положительных чисел!')
    exit()
    
m1 = Matrix(rw, cl, nm) # инициализация матрицы
print('Размерность генерируемой матрицы:', m1.row,'х', m1.col)
print('Сгенерированная матрица в виде списка списков:', m1.all)
m1.mtr_print() #вывод матрицы презентабельного вида на экран

#Демонстрация метода поиска get_Matrix()
try:
    ii = int(input(f'Укажите для поиска элемента номер строки матрицы от 1 до {m1.row}: '))
    jj = int(input(f'Укажите для поиска элемента номер колонки матрицы от 1 до {m1.col}: '))
    print(f'Элемент матрицы с индексами ({ii},{jj}) =', m1.get_Matrix(ii,jj))
except:
    print(f'Элемент матрицы с индексами ({ii},{jj}) не найден!')
    
#Демонстрация метода подмены set_Matrix()
try:
    ii = int(input(f'Укажите для корректировки значения элемента номер строки матрицы от 1 до {m1.row}: '))
    jj = int(input(f'Укажите для корректировки значения элемента номер колонки матрицы от 1 до {m1.col}: '))
    vv = int(input(f'Элемент матрицы с индексами ({ii},{jj}) имеет значение {m1.get_Matrix(ii,jj)}, укажите новое значение: '))
    m1.set_Matrix(ii,jj,vv) #Подмена на новое значение
    m1.mtr_print() #для визуализации изменений вывод матрицы презентабельного вида на экран
except:
    print(f'Элемент матрицы с индексами ({ii},{jj}) не найден!')        
    
    
# m2 = Matrix(2,2) # экземляр второй матрицы создадим без передачи третьего параметра (num=10 по умолчанию)
# print(m2.all)
# print(m2.get_Matrix(1,2))
# m2.set_Matrix(2,2,33)
# print(m2.get_Matrix(2,2))
# m2.mtr_print()